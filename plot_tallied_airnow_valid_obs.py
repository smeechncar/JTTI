"""
plot_tallied_airnow_valid_obs.py

Written by: Jared A. Lee (jaredlee@ucar.edu)
Written on: 3 Jun 2024

This script plots output files generated by tally_airnow_valid_obs.py.
"""

import os
import sys
import argparse
import pathlib
import copy
import numpy as np
import pandas as pd
import xarray as xr
import datetime as dt
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.ticker as mticker
import wrf
import cartopy
import cartopy.crs as ccrs
from functions import map_functions

def main():
    out_dir = pathlib.Path('/','glade','campaign','ral','nsap','JTTI','bcdata','airnow','split','sites_static')

    plot_type = 'png'
    plot_hist = False
    plot_maps = True

    date_beg = '20200801_00'
    date_end = '20211231_23'

    pm25_str = '$\mathregular{PM_{2.5}}$'
    o3_str = '$\mathregular{O_{3}}$'

    fmt_yyyymmdd_hh = '%Y%m%d_%H'
    fmt_yyyymmddhh  = '%Y%m%d%H'
    fmt_yyyymmdd = '%Y%m%d'
    fmt_yyyy = '%Y'
    fmt_mm = '%m'
    fmt_hh = '%H'
    fmt_date = '%Y-%m-%d'
    fmt_date_hh = '%Y-%m-%d_%H'

    dt_beg = dt.datetime.strptime(date_beg, fmt_yyyymmdd_hh)
    dt_end = dt.datetime.strptime(date_end, fmt_yyyymmdd_hh)

    fname_in_all = out_dir.joinpath('airnow_pm2.5_o3_valid_uptime_'+date_beg+'-'+date_end+'_all.nc')
    fname_in_use = out_dir.joinpath('airnow_pm2.5_o3_valid_uptime_'+date_beg+'-'+date_end+'_use.nc')
    fname_in_val = out_dir.joinpath('airnow_pm2.5_o3_valid_uptime_'+date_beg+'-'+date_end+'_val.nc')

    print('Reading '+str(fname_in_all))
    ds_all = xr.open_dataset(fname_in_all)
    pm25_lon_all = ds_all.pm25_lon_all
    pm25_lat_all = ds_all.pm25_lat_all
    pm25_pct_all = ds_all.pm25_pct_all
    o3_lon_all = ds_all.o3_lon_all
    o3_lat_all = ds_all.o3_lat_all
    o3_pct_all = ds_all.o3_pct_all
    n_pm25_all = len(pm25_lon_all)
    n_o3_all = len(o3_lon_all)

    print('Reading '+str(fname_in_use))
    ds_use = xr.open_dataset(fname_in_use)
    pm25_lon_use = ds_use.pm25_lon_use
    pm25_lat_use = ds_use.pm25_lat_use
    pm25_pct_use = ds_use.pm25_pct_use
    o3_lon_use = ds_use.o3_lon_use
    o3_lat_use = ds_use.o3_lat_use
    o3_pct_use = ds_use.o3_pct_use
    n_pm25_use = len(pm25_lon_use)
    n_o3_use = len(o3_lon_use)

    print('Reading '+str(fname_in_val))
    ds_val = xr.open_dataset(fname_in_val)
    pm25_lon_val = ds_val.pm25_lon_val
    pm25_lat_val = ds_val.pm25_lat_val
    pm25_pct_val = ds_val.pm25_pct_val
    o3_lon_val = ds_val.o3_lon_val
    o3_lat_val = ds_val.o3_lat_val
    o3_pct_val = ds_val.o3_pct_val
    n_pm25_val = len(pm25_lon_val)
    n_o3_val = len(o3_lon_val)

    suptitle_pm25_all = 'AirNow '+pm25_str+' Obs, All Sites ('+str(n_pm25_all)+' Stations)'
    suptitle_o3_all   = 'AirNow '+o3_str+' Obs, All Sites ('+str(n_o3_all)+' Stations)'
    suptitle_pm25_use = 'AirNow '+pm25_str+' Obs, Sites Used for Training ('+str(n_pm25_use)+' Stations)'
    suptitle_o3_use   = 'AirNow '+o3_str+' Obs, Sites Used for Training ('+str(n_o3_use)+' Stations)'
    suptitle_pm25_val = 'AirNow '+pm25_str+' Obs, Sites Held for Validation ('+str(n_pm25_val)+' Stations)'
    suptitle_o3_val   = 'AirNow '+o3_str+' Obs, Sites Held for Validation ('+str(n_o3_val)+' Stations)'

    if plot_hist:
        fontsize = 12
        suptitle_y = 0.95
        mpl.rcParams['figure.figsize'] = (10,8)
        mpl.rcParams['figure.titlesize'] = fontsize+4
        mpl.rcParams['grid.color'] = 'gray'
        mpl.rcParams['grid.linestyle'] = ':'
        mpl.rcParams['font.size'] = fontsize
        mpl.rcParams['savefig.bbox'] = 'tight'
        mpl.rcParams['hist.bins'] = np.arange(0.0, 100.1, 5.0)

        xlabel = 'Percentage of Hours with Valid Reports'
        ylabel = 'Count'
        title = date_beg+' to '+date_end

        ## Make histograms with percentage bins for all stations within the period
        fname = out_dir.joinpath('hist_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_all.'+plot_type)
        var = obs_pm25_pct_all
        make_hist_plot(fname, var, suptitle_pm25_all, title, xlabel, ylabel)

        fname = out_dir.joinpath('hist_o3_valid_obs_'+date_beg+'-'+date_end+'_all.'+plot_type)
        var = obs_o3_pct_all
        make_hist_plot(fname, var, suptitle_o3_all, title, xlabel, ylabel)

        ## Make histograms with percentage bins for use stations within the period
        fname = out_dir.joinpath('hist_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_use.'+plot_type)
        var = obs_pm25_pct_use
        make_hist_plot(fname, var, suptitle_pm25_use, title, xlabel, ylabel)

        fname = out_dir.joinpath('hist_o3_valid_obs_'+date_beg+'-'+date_end+'_use.'+plot_type)
        var = obs_o3_pct_use
        make_hist_plot(fname, var, suptitle_o3_use, title, xlabel, ylabel)

        ## Make histograms with percentage bins for val stations within the period
        fname = out_dir.joinpath('hist_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_val.'+plot_type)
        var = obs_pm25_pct_val
        make_hist_plot(fname, var, suptitle_pm25_val, title, xlabel, ylabel)

        fname = out_dir.joinpath('hist_o3_valid_obs_'+date_beg+'-'+date_end+'_val.'+plot_type)
        var = obs_o3_pct_val
        make_hist_plot(fname, var, suptitle_o3_val, title, xlabel, ylabel)

    if plot_maps:
        fontsize = 12
        suptitle_y = 0.88

        ## Make maps with percentage valid reports for all stations within the period
        ## First, open the CMAQ sample/coordinate file to get map projection parameters
        cmaq_fname = pathlib.Path('/','glade','campaign','ral','nsap','JTTI','bcdata','aqm.t12z.grdcro2d.ncf')
        print('Reading CMAQ coordinate data from '+str(cmaq_fname))
        cmaq_ds = xr.open_dataset(cmaq_fname)
        cmaq_lon = cmaq_ds.LON[0,0,:,:].rename({'ROW':'latitude', 'COL':'longitude'}) # range (-180, 180]
        cmaq_lat = cmaq_ds.LAT[0,0,:,:].rename({'ROW':'latitude', 'COL':'longitude'})
        cmaq_lon = cmaq_lon.assign_coords(coords={'XLAT':cmaq_lat, 'XLONG':cmaq_lon})
        cmaq_lat = cmaq_lat.assign_coords(coords={'XLAT':cmaq_lat, 'XLONG':cmaq_lon})
        cmaq_lon.attrs['long_name'] = 'longitude'
        cmaq_lat.attrs['long_name'] = 'latitude'
        cmaq_lon.attrs['units'] = 'degrees_east'
        cmaq_lat.attrs['units'] = 'degrees_north'
        n_cmaq_lon = cmaq_lon.shape[1]
        n_cmaq_lat = cmaq_lat.shape[0]
        truelat1 = cmaq_ds.attrs['P_ALP']
        truelat2 = cmaq_ds.attrs['P_BET']
        stand_lon = cmaq_ds.attrs['P_GAM']
        cen_lat = cmaq_ds.attrs['YCENT']
        cen_lon = cmaq_ds.attrs['XCENT']
        pole_lat = 90.0
        pole_lon = 0.0
        map_proj = 1
        moad_cen_lat = cen_lat
        dx = cmaq_ds.attrs['XCELL']
        dy = cmaq_ds.attrs['YCELL']

        ## Create a dictionary of these projection attributes
        dict_proj = {
            'MAP_PROJ':map_proj, 'CEN_LAT':cen_lat, 'CEN_LON':cen_lon,
            'TRUELAT1':truelat1, 'TRUELAT2':truelat2, 'MOAD_CEN_LAT':moad_cen_lat,
            'STAND_LON':stand_lon, 'POLE_LAT':pole_lat, 'POLE_LON':pole_lon, 'DX':dx, 'DY':dy,
            }

        ## Create an object of class wrf.WrfProj, then a cartopy mapping object
        ## This is essentially a manual reproduction of what wrf.get_cartopy() does
        wrf_proj = wrf.util.getproj(**dict_proj)
        proj_obj = wrf_proj.cartopy()
        cart_proj = proj_obj

        ## Now get the cartopy project x and y limits
        cmaq_lat  = cmaq_lat.assign_attrs(projection=wrf_proj)
        cmaq_lon  = cmaq_lon.assign_attrs(projection=wrf_proj)
        cart_xlim = wrf.cartopy_xlim(var=cmaq_lat)
        cart_ylim = wrf.cartopy_ylim(var=cmaq_lat)

        ## Get Cartopy features
        borders, states, oceans, lakes, rivers, land = map_functions.get_cartopy_features()
        data_crs = ccrs.PlateCarree()

        title = date_beg+' to '+date_end
        cbar_lab = 'Percentage of Hours with Valid Reports'
        extend = 'max'
        cmap = mpl.cm.viridis
        bounds = np.arange(0.0, 95.1, 5.0)
        norm = mpl.colors.BoundaryNorm(bounds, cmap.N, extend=extend)
        water_color = 'lightblue'

        ## Make maps showing all stations in the period
        suptitle = suptitle_pm25_all
        fname = out_dir.joinpath('map_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_all.'+plot_type)
        var = pm25_pct_all
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=pm25_lat_all, marker_lon=pm25_lon_all, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)

        suptitle = suptitle_o3_all
        fname = out_dir.joinpath('map_o3_valid_obs_'+date_beg+'-'+date_end+'_all.'+plot_type)
        var = o3_pct_all
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=o3_lat_all, marker_lon=o3_lon_all, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)

        ## Make maps showing use stations in the period
        suptitle = suptitle_pm25_use
        fname = out_dir.joinpath('map_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_use.'+plot_type)
        var = pm25_pct_use
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=pm25_lat_use, marker_lon=pm25_lon_use, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)

        suptitle = suptitle_o3_use
        fname = out_dir.joinpath('map_o3_valid_obs_'+date_beg+'-'+date_end+'_use.'+plot_type)
        var = o3_pct_use
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=o3_lat_use, marker_lon=o3_lon_use, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)

        ## Make maps showing val stations in the period
        suptitle = suptitle_pm25_val
        fname = out_dir.joinpath('map_pm2.5_valid_obs_'+date_beg+'-'+date_end+'_val.'+plot_type)
        var = pm25_pct_val
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=pm25_lat_val, marker_lon=pm25_lon_val, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)

        suptitle = suptitle_o3_val
        fname = out_dir.joinpath('map_o3_valid_obs_'+date_beg+'-'+date_end+'_val.'+plot_type)
        var = o3_pct_val
        map_functions.mpl_map_plot(fname, var, suptitle, cbar_lab, cart_proj, cart_xlim, cart_ylim,
            cmaq_lon, cmaq_lat, cmap, bounds, norm, extend,
            borders=borders, states=states, lakes=lakes, oceans=oceans, water_color=water_color,
            marker_lat=o3_lat_val, marker_lon=o3_lon_val, marker='o', marker_val_fill=True, marker_size=64,
            title_c=title, suptitle_y=suptitle_y)


def make_hist_plot(fname, var, suptitle, title, xlabel, ylabel, suptitle_y=0.95):
    print('-- Creating plot: '+str(fname))
    counts, edges, bars = plt.hist(var)
    plt.bar_label(bars)
    plt.ylabel(ylabel)
    plt.xlabel(xlabel)
    plt.suptitle(suptitle, y=suptitle_y)
    plt.title(title)
    plt.grid(True, axis='both')
    plt.savefig(fname)
    plt.close()

if __name__ == '__main__':
    now_time_beg = dt.datetime.utcnow()
    main()
    now_time_end = dt.datetime.utcnow()
    run_time_tot = now_time_end - now_time_beg
    now_time_beg_str = now_time_beg.strftime('%Y-%m-%d %H:%M:%S')
    now_time_end_str = now_time_end.strftime('%Y-%m-%d %H:%M:%S')
    print('\nScript completed successfully.')
    print('   Beg time: '+now_time_beg_str)
    print('   End time: '+now_time_end_str)
    print('   Run time: '+str(run_time_tot)+'\n')
